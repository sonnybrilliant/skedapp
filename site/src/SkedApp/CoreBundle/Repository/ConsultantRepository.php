<?php

namespace SkedApp\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use SkedApp\CoreBundle\Entity\Service;

/**
 * consultantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsultantRepository extends EntityRepository
{

    /**
     * Get all active consultants query
     *
     * @author Ronald Conco <ronald.conco@kaizania.com>
     * @return Resultset
     */
    public function getAllActiveConsultantsQuery($options)
    {

        $defaultOptions = array(
            'searchText' => '',
            'sort' => 'c.id',
            'direction' => 'asc',
            'company' => null,
        );

        if (!isset($options['searchText']))
            $options['searchText'] = '';

        if (!isset($options['company']))
            $options['company'] = null;

        foreach ($options as $key => $values) {
            if (!$values) {
                $options[$key] = $defaultOptions[$key];
            }
        }

        $qb = $this->createQueryBuilder('c')->select('c');
        $qb->where('c.isDeleted =  :status')->setParameter('status', false);

        // search
        if ($options['searchText']) {
            if ($options['searchText'] != "search..") {
                $qb->andWhere($qb->expr()->orx(
                        $qb->expr()->like('c.firstName', $qb->expr()->literal('%' . $options['searchText'] . '%')), $qb->expr()->like('c.lastName', $qb->expr()->literal('%' . $options['searchText'] . '%')), $qb->expr()->like('c.email', $qb->expr()->literal('%' . $options['searchText'] . '%'))
                    ));
            }
        }

        //Filter by company ID
        if (is_object($options['company'])) {
            $qb->andWhere('c.company = :company')->setParameter('company', $options['company']);
        }

        $qb->orderBy($options['sort'], $options['direction']);
        return $qb->getQuery()->execute();
    }

    /**
     * Get all active consultants by Company query
     *
     * @author Otto Saayman <otto.saayman@creativecloud.co.za>
     * @return Resultset
     */
    public function getAllActiveConsultantsByCompanyQuery(\SkedApp\CoreBundle\Entity\Company $company, $options)
    {

        $defaultOptions = array(
            'sort' => 'c.id',
            'direction' => 'asc'
        );

        foreach ($options as $key => $values) {
            if (!$values)
                $options[$key] = $defaultOptions[$key];
        }

        $qb = $this->createQueryBuilder('c')->select('c');
        $qb->where('c.isDeleted =  :status')
            ->andWhere('c.company =  :company')
            ->setParameters(array('status' => false, 'company' => $company));
        $qb->orderBy($options['sort'], $options['direction']);
        return $qb->getQuery()->execute();
    }

    /**
     * Get all active consultants query within a radius based on a lat/ long point and radius
     *
     * @author Otto Saayman <otto.saayman@kaizania.co.za>
     * @return Array
     */
    public function getAllActiveConsultantsQueryWithinRadius($options)
    {

        $config = $this->getEntityManager()->getConfiguration();

        $config->addCustomNumericFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $config->addCustomNumericFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');
        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');

        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
            ->innerJoin('c.company', 'company')
            ->innerJoin('c.consultantServices', 's');
        $qb->where('c.isDeleted =  :status')
            ->andWhere('( 6371 * ACOS( COS( RADIANS(:latitude) ) * COS( RADIANS( company.lat ) ) * COS( RADIANS( company.lng ) - RADIANS(:longitude) ) '
                . ' + SIN( RADIANS(:latitude) ) * SIN( RADIANS( company.lat ) ) ) ) <= :radius')
            ->setParameters(array('status' => false, 'latitude' => $options['lat'], 'longitude' => $options['lng'], 'radius' => $options['radius']));

        $service = $options['service'];

        if ($service instanceof Service) {
            $qb->andWhere('s.id IN (:consultants)')
                ->setParameter('consultants', $service);
        }

        $output = $qb->getQuery()->execute();

        //Order consultants from nearest to furthest from location
        for ($x = 0; $x < (count($output) - 1); $x++) {
            for ($y = 1; $y < count($output); $y++) {

                $isValid = $output[$x]->getDistanceFromPosition($options['lat'], $options['lng']) > $output[$y]->getDistanceFromPosition($options['lat'], $options['lng']);

                if ($isValid) {
                    $tmp = $output[$y];
                    $output[$y] = $output[$x];
                    $output[$x] = $tmp;
                }
            }//end inner for
        }//end outer for

        return $output;
    }

    /**
     * Get consultant by service
     *
     * @param integer $serviceId
     * @return type
     */
    public function getByService($serviceId)
    {
        $qb = $this->createQueryBuilder('c')
            ->innerJoin('c.consultantServices', 's')
            ->where('s.id = :serviceId')
            ->setParameter('serviceId', $serviceId);

        return $qb->getQuery()->execute();
    }

    /**
     * Get all active consultants query
     *
     * @author Ronald Conco <ronald.conco@kaizania.com>
     * @return Resultset
     */
    public function getAllActiveQuery($options = array())
    {
        $qb = $this->createQueryBuilder('c')->select('c');
        $qb->where('c.isDeleted =  :status')->setParameter('status', false);

        if (isset($options['company'])) {
            $qb->andWhere('c.company =  :company')->setParameter('company', $options['company']);
        }

        return $qb->getQuery()->execute();
    }

    /**
     * Get all active consultants by Company query
     *
     * @author Otto Saayman <otto.saayman@creativecloud.co.za>
     * @return Resultset
     */
    public function getAllActiveByCompanyQuery(\SkedApp\CoreBundle\Entity\Company $company)
    {
        $qb = $this->createQueryBuilder('c')->select('c');
        $qb->where('c.isDeleted =  :status')
            ->andWhere('c.company =  :company')
            ->setParameters(array('status' => false, 'company' => $company));
        return $qb->getQuery()->execute();
    }

}
