<?php

namespace SkedApp\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * consultantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsultantRepository extends EntityRepository
{

    /**
     * Get all active consultants query
     *
     * @author Ronald Conco <ronald.conco@kaizania.com>
     * @return Resultset
     */
    public function getAllActiveConsultantsQuery($options)
    {

        $defaultOptions = array(
            'sort' => 'c.id',
            'direction' => 'asc'
        );

        foreach ($options as $key => $values) {
            if (!$values)
                $options[$key] = $defaultOptions[$key];
        }

        $objQueuryBuilder = $this->createQueryBuilder('c')->select('c');
        $objQueuryBuilder->where('c.isDeleted =  :status')->setParameter('status', false);
        $objQueuryBuilder->orderBy($options['sort'], $options['direction']);
        return $objQueuryBuilder->getQuery()->execute();
    }

    /**
     * Get all active consultants query within a radius based on a lat/ long point and radius
     *
     * @author Otto Saayman <otto.saayman@kaizania.co.za>
     * @return Resultset
     */
    public function getAllActiveConsultantsQueryWithinRadius($options)
    {

        $defaultOptions = array(
            'sort' => 'c.id',
            'direction' => 'asc'
        );

        foreach ($options as $key => $values) {
            if (!$values)
                $options[$key] = $defaultOptions[$key];
        }

        $config = $this->getEntityManager()->getConfiguration();
        $config->addCustomNumericFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $config->addCustomNumericFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');
        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');

        $objQueuryBuilder = $this->createQueryBuilder('c');
        $objQueuryBuilder->select('c');
        $objQueuryBuilder->innerJoin ('SkedAppCoreBundle:Company', 'comp');
        $objQueuryBuilder->where('c.isDeleted =  :status')
                ->andWhere('( 6371 * ACOS( COS( RADIANS(:latitude) ) * COS( RADIANS( comp.lat ) ) * COS( RADIANS( comp.lng ) - RADIANS(:longitude) ) '
                    . ' + SIN( RADIANS(:latitude) ) * SIN( RADIANS( comp.lat ) ) ) ) <= :radius')
                ->setParameters(array ('status' => false, 'latitude' => $options['lat'], 'longitude' => $options['lng'], 'radius' => $options['radius']));
//        $objQueuryBuilder->add('orderBy', '( 6371 * ACOS( COS( RADIANS(:latitude) ) * COS( RADIANS( comp.lat ) ) * COS( RADIANS( comp.lng ) - RADIANS(:longitude) ) '
//                . ' + SIN( RADIANS(:latitude) ) * SIN( RADIANS( comp.lat ) ) ) ) Desc', true);
        $objQueuryBuilder->add('orderBy', $options['sort'] . ' ' . $options['direction'], true);

        $arrOut = $objQueuryBuilder->getQuery()->execute();

        for ($intCnt1 = 0; $intCnt1 < (count ($arrOut) - 1); $intCnt1++) {
          for ($intCnt2 = 1; $intCnt2 < count ($arrOut); $intCnt2++) {
            if ($arrOut[$intCnt1]->getDistanceFromPosition($options['lat'], $options['lng']) > $arrOut[$intCnt2]->getDistanceFromPosition($options['lat'], $options['lng'])) {
              $objDummy = $arrOut[$intCnt2];
              $arrOut[$intCnt2] = $arrOut[$intCnt1];
              $arrOut[$intCnt1] = $objDummy;
            }
          }
        }

        return $arrOut;

    }

    /**
     * Get consultant by service
     *
     * @param integer $serviceId
     * @return type
     */
    public function getByService($serviceId)
    {
        $qb = $this->createQueryBuilder('c')
            ->innerJoin('c.consultantServices', 's')
            ->where('s.id = :serviceId')
            ->setParameter('serviceId', $serviceId);

        return $qb->getQuery()->execute();
    }

    /**
     * Get all active consultants query
     *
     * @author Ronald Conco <ronald.conco@kaizania.com>
     * @return Resultset
     */
    public function getAllActiveQuery()
    {
        $objQueuryBuilder = $this->createQueryBuilder('c')->select('c');
        $objQueuryBuilder->where('c.isDeleted =  :status')->setParameter('status', false);
        return $objQueuryBuilder->getQuery()->execute();
    }

}
