<?php

namespace SkedApp\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends EntityRepository
{
    
    /**
     * Get all bookings
     * 
     * @return array
     */
    public function getAllBooking()
    {
         $qb = $this->createQueryBuilder('b')
             ->select('b')
             ->where("b.isDeleted = :delete")
             ->andWhere("b.isActive = :active")
             ->andWhere("b.isCancelled = :cancelled")
             ->setParameters(array(
                 'delete' => false,
                 'active' => true,
                 'cancelled' => false
             ));
          return $qb->getQuery()->execute();    
    }

    /**
     * Is consultant available
     * 
     * @param SkedAppCoreBundle:Consultant $consultant
     * @param datetime $bookingStartDate
     * @param datetime $bookingEndDate
     * @return array
     */
    public function isConsultantAvailable($consultant, $bookingStartDate, $bookingEndDate)
    {
        $dql = "SELECT b FROM SkedAppCoreBundle:Booking b 
                WHERE b.consultant = ?1 AND b.isDeleted = ?2 
                AND b.isActive = ?3 AND b.isCancelled = ?4 
                AND ( b.hiddenAppointmentStartTime >= ?5 AND b.hiddenAppointmentStartTime <= ?6 ) 
                OR  ( b.hiddenAppointmentEndTime >= ?5 AND b.hiddenAppointmentEndTime <= ?6 )
                OR  ( b.hiddenAppointmentStartTime <= ?5 AND b.hiddenAppointmentEndTime >= ?6 )";
        return $this->getEntityManager()->createQuery($dql)
                ->setParameters(array(
                    1 => $consultant,
                    2 => false,
                    3 => true,
                    4 => false,
                    5 => $bookingStartDate,
                    6 => $bookingEndDate
                ))
                ->getResult();
    }

    /**
     * Get bookings for consultant
     * 
     * @param SkedAppCoreBundle:Consultant $consultant
     * @param datetime $bookingDate
     * @return string|array
     */
    public function getBookingsForConsultantSearch($consultant, $bookingDate)
    {

        $arrOut = array('error_message' => null);

        //check next day consultant is available
        $intDoWAvailable = -1;
        $intCntCheck = 1;
        $blnIsAvailable = false;

        while (($intDoWAvailable < 0) && ($intCntCheck <= 7) && (!$blnIsAvailable)) {
            $strDayName = $bookingDate->format('l');
            eval("\$blnIsAvailable = \$consultant->get$strDayName();");
            $bookingDate->add(new \DateInterval('P1D'));
            $intCntCheck++;
        }

        if (!$blnIsAvailable) {

            $arrOut['error_message'] = 'This consultant is not available fo rhte next 7 days';

            return $arrOut;
        }

        //Add one month to the date for search for open time slot will stop
        $objStopDate = $bookingDate;
        $objStopDate->add(new \DateInterval('P1M'));

        $qb = $this->createQueryBuilder('b');
        $qb->select('b');
        $qb->where('b.consultant =  :consultant')
            ->andWhere('b.appointmentDate >= :current_date')
            ->andWhere('b.appointmentDate <= :stop_date')
            ->andWhere('b.isDeleted = 0')
            ->setParameters(array('consultant' => $consultant->getId(), 'current_date' => $bookingDate->format('Y-m-d'), 'stop_date' => $objStopDate->format('Y-m-d')));
        $qb->add('orderBy', 'b.appointmentDate Desc', true);

        $bookings = $qb->getQuery()->execute();

        $arrOut['time_slots'] = array();

        return $arrOut;
    }

}
